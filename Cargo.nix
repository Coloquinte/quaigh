# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.
args @ {
  release ? true,
  rootFeatures ? [
    "quaigh/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  cargoUnstableFlags ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
  ignoreLockHash,
}: let
  nixifiedLockHash = "dcc3112536b139bd79a0641a2b3b32f397637b3964f9171485d465078db86551";
  workspaceSrc =
    if args.workspaceSrc == null
    then ./.
    else args.workspaceSrc;
  currentLockHash = builtins.hashFile "sha256" (workspaceSrc + /Cargo.lock);
  lockHashIgnored =
    if ignoreLockHash
    then builtins.trace "Ignoring lock hash" ignoreLockHash
    else ignoreLockHash;
in
  if !lockHashIgnored && (nixifiedLockHash != currentLockHash)
  then throw "Cargo.nix ${nixifiedLockHash} is out of sync with Cargo.lock ${currentLockHash}"
  else let
    inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
    profilesByName = {
    };
    rootFeatures' = expandFeatures rootFeatures;
    overridableMkRustCrate = f: let
      drvs = genDrvsByProfile profilesByName ({
        profile,
        profileName,
      }:
        mkRustCrate ({inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts cargoUnstableFlags rustcLinkFlags rustcBuildFlags;} // (f profileName)));
    in
      {
        compileMode ? null,
        profileName ? decideProfile compileMode release,
      }: let
        drv = drvs.${profileName};
      in
        if compileMode == null
        then drv
        else drv.override {inherit compileMode;};
  in {
    cargo2nixVersion = "0.11.0";
    workspace = {
      quaigh = rustPackages.unknown.quaigh."0.0.6";
    };
    "registry+https://github.com/rust-lang/crates.io-index".android-tzdata."0.1.1" = overridableMkRustCrate (profileName: rec {
      name = "android-tzdata";
      version = "0.1.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" = overridableMkRustCrate (profileName: rec {
      name = "android_system_properties";
      version = "0.1.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311";
      };
      dependencies = {
        libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.14" = overridableMkRustCrate (profileName: rec {
      name = "anstream";
      version = "0.6.14";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "418c75fa768af9c03be99d17643f93f79bbba589895012a80e3452a19ddda15b";
      };
      features = builtins.concatLists [
        ["auto"]
        ["default"]
        ["wincon"]
      ];
      dependencies = {
        anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.7" {inherit profileName;}).out;
        anstyle_parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.4" {inherit profileName;}).out;
        anstyle_query = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.1.0" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "anstyle_wincon"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.3" {inherit profileName;}).out;
        colorchoice = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.1" {inherit profileName;}).out;
        is_terminal_polyfill = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".is_terminal_polyfill."1.70.0" {inherit profileName;}).out;
        utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.2" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.7" = overridableMkRustCrate (profileName: rec {
      name = "anstyle";
      version = "1.0.7";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b";
      };
      features = builtins.concatLists [
        ["default"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.4" = overridableMkRustCrate (profileName: rec {
      name = "anstyle-parse";
      version = "0.2.4";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "c03a11a9034d92058ceb6ee011ce58af4a9bf61491aa7e1e59ecd24bd40d22d4";
      };
      features = builtins.concatLists [
        ["default"]
        ["utf8"]
      ];
      dependencies = {
        utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.2" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.1.0" = overridableMkRustCrate (profileName: rec {
      name = "anstyle-query";
      version = "1.1.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "ad186efb764318d35165f1758e7dcef3b10628e26d41a44bc5550652e6804391";
      };
      dependencies = {
        ${
          if hostPlatform.isWindows
          then "windows_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.3" = overridableMkRustCrate (profileName: rec {
      name = "anstyle-wincon";
      version = "3.0.3";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "61a38449feb7068f52bb06c12759005cf459ee52bb4adc1d5a7c4322d716fb19";
      };
      dependencies = {
        anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.7" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "windows_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" = overridableMkRustCrate (profileName: rec {
      name = "atty";
      version = "0.2.14";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8";
      };
      dependencies = {
        ${
          if hostPlatform.parsed.kernel.name == "hermit"
          then "hermit_abi"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" {inherit profileName;}).out;
        ${
          if hostPlatform.isUnix
          then "libc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "winapi"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.3.0" = overridableMkRustCrate (profileName: rec {
      name = "autocfg";
      version = "1.3.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
      name = "bitflags";
      version = "1.3.2";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a";
      };
      features = builtins.concatLists [
        ["default"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" = overridableMkRustCrate (profileName: rec {
      name = "bitflags";
      version = "2.6.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de";
      };
      features = builtins.concatLists [
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.16.0" = overridableMkRustCrate (profileName: rec {
      name = "bumpalo";
      version = "3.16.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c";
      };
      features = builtins.concatLists [
        ["default"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" = overridableMkRustCrate (profileName: rec {
      name = "byteorder";
      version = "1.5.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b";
      };
      features = builtins.concatLists [
        ["default"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".cbindgen."0.26.0" = overridableMkRustCrate (profileName: rec {
      name = "cbindgen";
      version = "0.26.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "da6bc11b07529f16944307272d5bd9b22530bc7d05751717c9d416586cedab49";
      };
      features = builtins.concatLists [
        ["clap"]
        ["default"]
      ];
      dependencies = {
        clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."3.2.25" {inherit profileName;}).out;
        heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" {inherit profileName;}).out;
        indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" {inherit profileName;}).out;
        log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" {inherit profileName;}).out;
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.203" {inherit profileName;}).out;
        serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.118" {inherit profileName;}).out;
        syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;}).out;
        tempfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.10.1" {inherit profileName;}).out;
        toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.11" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.101" = overridableMkRustCrate (profileName: rec {
      name = "cc";
      version = "1.0.101";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "ac367972e516d45567c7eafc73d24e1c193dcf200a8d94e9db7b3d38b349572d";
      };
      features = builtins.concatLists [
        ["parallel"]
      ];
      dependencies = {
        jobserver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.31" {inherit profileName;}).out;
        ${
          if hostPlatform.isUnix
          then "libc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
      name = "cfg-if";
      version = "1.0.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" = overridableMkRustCrate (profileName: rec {
      name = "chrono";
      version = "0.4.38";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["android-tzdata"]
        ["clock"]
        ["default"]
        ["iana-time-zone"]
        ["js-sys"]
        ["now"]
        ["oldtime"]
        ["std"]
        ["wasm-bindgen"]
        ["wasmbind"]
        ["winapi"]
        ["windows-targets"]
      ];
      dependencies = {
        ${
          if hostPlatform.parsed.kernel.name == "android"
          then "android_tzdata"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android-tzdata."0.1.1" {inherit profileName;}).out;
        ${
          if hostPlatform.isUnix
          then "iana_time_zone"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.60" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi")
          then "js_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.69" {inherit profileName;}).out;
        num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi")
          then "wasm_bindgen"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "windows_targets"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.5" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".clap."3.2.25" = overridableMkRustCrate (profileName: rec {
      name = "clap";
      version = "3.2.25";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "4ea181bf566f71cb9a5d17a59e1871af638180a18fb0035c92ae62b705207123";
      };
      features = builtins.concatLists [
        ["atty"]
        ["color"]
        ["default"]
        ["std"]
        ["strsim"]
        ["suggestions"]
        ["termcolor"]
      ];
      dependencies = {
        atty = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" {inherit profileName;}).out;
        bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" {inherit profileName;}).out;
        clap_lex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.2.4" {inherit profileName;}).out;
        indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" {inherit profileName;}).out;
        strsim = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" {inherit profileName;}).out;
        termcolor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.4.1" {inherit profileName;}).out;
        textwrap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".textwrap."0.16.1" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".clap."4.5.8" = overridableMkRustCrate (profileName: rec {
      name = "clap";
      version = "4.5.8";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "84b3edb18336f4df585bc9aa31dd99c036dfa5dc5e9a2939a722a188f3a8970d";
      };
      features = builtins.concatLists [
        ["color"]
        ["default"]
        ["derive"]
        ["error-context"]
        ["help"]
        ["std"]
        ["suggestions"]
        ["usage"]
      ];
      dependencies = {
        clap_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.8" {inherit profileName;}).out;
        clap_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.8" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.8" = overridableMkRustCrate (profileName: rec {
      name = "clap_builder";
      version = "4.5.8";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "c1c09dd5ada6c6c78075d6fd0da3f90d8080651e2d6cc8eb2f1aaa4034ced708";
      };
      features = builtins.concatLists [
        ["color"]
        ["error-context"]
        ["help"]
        ["std"]
        ["suggestions"]
        ["usage"]
      ];
      dependencies = {
        anstream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.14" {inherit profileName;}).out;
        anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.7" {inherit profileName;}).out;
        clap_lex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.1" {inherit profileName;}).out;
        strsim = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.1" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.8" = overridableMkRustCrate (profileName: rec {
      name = "clap_derive";
      version = "4.5.8";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "2bac35c6dafb060fd4d275d9a4ffae97917c13a6327903a8be2153cd964f7085";
      };
      features = builtins.concatLists [
        ["default"]
      ];
      dependencies = {
        heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" {inherit profileName;}).out;
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.68" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.2.4" = overridableMkRustCrate (profileName: rec {
      name = "clap_lex";
      version = "0.2.4";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "2850f2f5a82cbf437dd5af4d49848fbdfc27c157c3d010345776f952765261c5";
      };
      dependencies = {
        os_str_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".os_str_bytes."6.6.1" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.1" = overridableMkRustCrate (profileName: rec {
      name = "clap_lex";
      version = "0.7.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "4b82cf0babdbd58558212896d1a4272303a57bdb245c2bf1147185fb45640e70";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.1" = overridableMkRustCrate (profileName: rec {
      name = "colorchoice";
      version = "1.0.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "0b6a852b24ab71dffc585bcb46eaf7959d175cb865a7152e35b348d1b2960422";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" = overridableMkRustCrate (profileName: rec {
      name = "core-foundation-sys";
      version = "0.8.6";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f";
      };
      features = builtins.concatLists [
        ["default"]
        ["link"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".cpu-time."1.0.0" = overridableMkRustCrate (profileName: rec {
      name = "cpu-time";
      version = "1.0.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "e9e393a7668fe1fad3075085b86c781883000b4ede868f43627b34a87c8b7ded";
      };
      dependencies = {
        ${
          if hostPlatform.isUnix
          then "libc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "winapi"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" = overridableMkRustCrate (profileName: rec {
      name = "either";
      version = "1.13.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0";
      };
      features = builtins.concatLists [
        ["use_std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".errno."0.3.9" = overridableMkRustCrate (profileName: rec {
      name = "errno";
      version = "0.3.9";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba";
      };
      features = builtins.concatLists [
        ["std"]
      ];
      dependencies = {
        ${
          if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "hermit" || hostPlatform.parsed.kernel.name == "wasi"
          then "libc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "windows_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".fastrand."2.1.0" = overridableMkRustCrate (profileName: rec {
      name = "fastrand";
      version = "2.1.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["default"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" = overridableMkRustCrate (profileName: rec {
      name = "form_urlencoded";
      version = "1.2.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["default"]
        ["std"]
      ];
      dependencies = {
        percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".formatx."0.2.2" = overridableMkRustCrate (profileName: rec {
      name = "formatx";
      version = "0.2.2";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "db0f0c49aba98a3b2578315766960bd242885ff672fd62610c5557cd6c6efe03";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" = overridableMkRustCrate (profileName: rec {
      name = "fxhash";
      version = "0.2.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c";
      };
      dependencies = {
        byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" = overridableMkRustCrate (profileName: rec {
      name = "getrandom";
      version = "0.2.15";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7";
      };
      features = builtins.concatLists [
        ["std"]
      ];
      dependencies = {
        cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;}).out;
        ${
          if hostPlatform.isUnix
          then "libc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.kernel.name == "wasi"
          then "wasi"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".git2."0.18.3" = overridableMkRustCrate (profileName: rec {
      name = "git2";
      version = "0.18.3";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "232e6a7bfe35766bf715e55a88b39a700596c0ccfd88cd3680b4cdb40d66ef70";
      };
      features = builtins.concatLists [
        ["default"]
        ["https"]
        ["openssl-probe"]
        ["openssl-sys"]
        ["ssh"]
        ["ssh_key_from_memory"]
      ];
      dependencies = {
        bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" {inherit profileName;}).out;
        libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        libgit2_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libgit2-sys."0.16.2+1.7.2" {inherit profileName;}).out;
        log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" {inherit profileName;}).out;
        ${
          if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin")
          then "openssl_probe"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" {inherit profileName;}).out;
        ${
          if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin")
          then "openssl_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.102" {inherit profileName;}).out;
        url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" = overridableMkRustCrate (profileName: rec {
      name = "glob";
      version = "0.3.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" = overridableMkRustCrate (profileName: rec {
      name = "hashbrown";
      version = "0.12.3";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888";
      };
      features = builtins.concatLists [
        ["raw"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" = overridableMkRustCrate (profileName: rec {
      name = "heck";
      version = "0.4.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8";
      };
      features = builtins.concatLists [
        ["default"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" = overridableMkRustCrate (profileName: rec {
      name = "heck";
      version = "0.5.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" = overridableMkRustCrate (profileName: rec {
      name = "hermit-abi";
      version = "0.1.19";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33";
      };
      features = builtins.concatLists [
        ["default"]
      ];
      dependencies = {
        libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.60" = overridableMkRustCrate (profileName: rec {
      name = "iana-time-zone";
      version = "0.1.60";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141";
      };
      features = builtins.concatLists [
        ["fallback"]
      ];
      dependencies = {
        ${
          if hostPlatform.parsed.kernel.name == "android"
          then "android_system_properties"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios"
          then "core_foundation_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.kernel.name == "haiku"
          then "iana_time_zone_haiku"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.2" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "wasm32"
          then "js_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.69" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "wasm32"
          then "wasm_bindgen"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.kernel.name == "windows"
          then "windows_core"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-core."0.52.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.2" = overridableMkRustCrate (profileName: rec {
      name = "iana-time-zone-haiku";
      version = "0.1.2";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f";
      };
      buildDependencies = {
        cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.101" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".idna."0.5.0" = overridableMkRustCrate (profileName: rec {
      name = "idna";
      version = "0.5.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["default"]
        ["std"]
      ];
      dependencies = {
        unicode_bidi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.15" {inherit profileName;}).out;
        unicode_normalization = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.23" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" = overridableMkRustCrate (profileName: rec {
      name = "indexmap";
      version = "1.9.3";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99";
      };
      features = builtins.concatLists [
        ["std"]
      ];
      dependencies = {
        hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" {inherit profileName;}).out;
      };
      buildDependencies = {
        autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.3.0" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".is_terminal_polyfill."1.70.0" = overridableMkRustCrate (profileName: rec {
      name = "is_terminal_polyfill";
      version = "1.70.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "f8478577c03552c21db0e2724ffb8986a5ce7af88107e6be5d2ee6e158c12800";
      };
      features = builtins.concatLists [
        ["default"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" = overridableMkRustCrate (profileName: rec {
      name = "itertools";
      version = "0.12.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569";
      };
      features = builtins.concatLists [
        ["default"]
        ["use_alloc"]
        ["use_std"]
      ];
      dependencies = {
        either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" = overridableMkRustCrate (profileName: rec {
      name = "itoa";
      version = "1.0.11";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.31" = overridableMkRustCrate (profileName: rec {
      name = "jobserver";
      version = "0.1.31";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "d2b099aaa34a9751c5bf0878add70444e1ed2dd73f347be99003d4577277de6e";
      };
      dependencies = {
        ${
          if hostPlatform.isUnix
          then "libc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.69" = overridableMkRustCrate (profileName: rec {
      name = "js-sys";
      version = "0.3.69";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d";
      };
      dependencies = {
        wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".kdam."0.5.2" = overridableMkRustCrate (profileName: rec {
      name = "kdam";
      version = "0.5.2";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "526586ea01a9a132b5f8d3a60f6d6b41b411550236f5ee057795f20b37316957";
      };
      features = builtins.concatLists [
        ["template"]
      ];
      dependencies = {
        formatx = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".formatx."0.2.2" {inherit profileName;}).out;
        terminal_size = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".terminal_size."0.3.0" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "windows_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" = overridableMkRustCrate (profileName: rec {
      name = "libc";
      version = "0.2.155";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c";
      };
      features = builtins.concatLists [
        ["default"]
        ["extra_traits"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".libgit2-sys."0.16.2+1.7.2" = overridableMkRustCrate (profileName: rec {
      name = "libgit2-sys";
      version = "0.16.2+1.7.2";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "ee4126d8b4ee5c9d9ea891dd875cfdc1e9d0950437179104b183d7d8a74d24e8";
      };
      features = builtins.concatLists [
        ["https"]
        ["libssh2-sys"]
        ["openssl-sys"]
        ["ssh"]
        ["ssh_key_from_memory"]
      ];
      dependencies = {
        libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        libssh2_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libssh2-sys."0.3.0" {inherit profileName;}).out;
        libz_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.18" {inherit profileName;}).out;
        ${
          if hostPlatform.isUnix
          then "openssl_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.102" {inherit profileName;}).out;
      };
      buildDependencies = {
        cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.101" {profileName = "__noProfile";}).out;
        pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".libssh2-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
      name = "libssh2-sys";
      version = "0.3.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "2dc8a030b787e2119a731f1951d6a773e2280c660f8ec4b0f5e1505a386e71ee";
      };
      dependencies = {
        libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        libz_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.18" {inherit profileName;}).out;
        ${
          if hostPlatform.isUnix
          then "openssl_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.102" {inherit profileName;}).out;
      };
      buildDependencies = {
        cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.101" {profileName = "__noProfile";}).out;
        pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" {profileName = "__noProfile";}).out;
        ${
          if hostPlatform.parsed.abi.name == "msvc"
          then "vcpkg"
          else null
        } =
          (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.18" = overridableMkRustCrate (profileName: rec {
      name = "libz-sys";
      version = "1.1.18";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "c15da26e5af7e25c90b37a2d75cdbf940cf4a55316de9d84c679c9b8bfabf82e";
      };
      features = builtins.concatLists [
        ["libc"]
      ];
      dependencies = {
        libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
      };
      buildDependencies = {
        cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.101" {profileName = "__noProfile";}).out;
        pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" {profileName = "__noProfile";}).out;
        vcpkg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.14" = overridableMkRustCrate (profileName: rec {
      name = "linux-raw-sys";
      version = "0.4.14";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89";
      };
      features = builtins.concatLists [
        ["elf"]
        ["errno"]
        ["general"]
        ["ioctl"]
        ["no_std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" = overridableMkRustCrate (profileName: rec {
      name = "log";
      version = "0.4.22";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" = overridableMkRustCrate (profileName: rec {
      name = "memchr";
      version = "2.7.4";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
      name = "minimal-lexical";
      version = "0.2.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a";
      };
      features = builtins.concatLists [
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" = overridableMkRustCrate (profileName: rec {
      name = "nom";
      version = "7.1.3";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["default"]
        ["std"]
      ];
      dependencies = {
        memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {inherit profileName;}).out;
        minimal_lexical = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" = overridableMkRustCrate (profileName: rec {
      name = "num-traits";
      version = "0.2.19";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841";
      };
      buildDependencies = {
        autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.3.0" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" = overridableMkRustCrate (profileName: rec {
      name = "once_cell";
      version = "1.19.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["default"]
        ["race"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" = overridableMkRustCrate (profileName: rec {
      name = "openssl-probe";
      version = "0.1.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.102" = overridableMkRustCrate (profileName: rec {
      name = "openssl-sys";
      version = "0.9.102";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "c597637d56fbc83893a35eb0dd04b2b8e7a50c91e64e9493e398b5df4fb45fa2";
      };
      dependencies = {
        libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
      };
      buildDependencies = {
        cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.101" {profileName = "__noProfile";}).out;
        pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" {profileName = "__noProfile";}).out;
        vcpkg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".os_str_bytes."6.6.1" = overridableMkRustCrate (profileName: rec {
      name = "os_str_bytes";
      version = "6.6.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "e2355d85b9a3786f481747ced0e0ff2ba35213a1f9bd406ed906554d7af805a1";
      };
      features = builtins.concatLists [
        ["raw_os_str"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" = overridableMkRustCrate (profileName: rec {
      name = "percent-encoding";
      version = "2.3.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["default"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" = overridableMkRustCrate (profileName: rec {
      name = "pkg-config";
      version = "0.3.30";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" = overridableMkRustCrate (profileName: rec {
      name = "ppv-lite86";
      version = "0.2.17";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de";
      };
      features = builtins.concatLists [
        ["simd"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" = overridableMkRustCrate (profileName: rec {
      name = "proc-macro2";
      version = "1.0.86";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77";
      };
      features = builtins.concatLists [
        ["default"]
        ["proc-macro"]
      ];
      dependencies = {
        unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" {inherit profileName;}).out;
      };
    });

    "unknown".quaigh."0.0.6" = overridableMkRustCrate (profileName: rec {
      name = "quaigh";
      version = "0.0.6";
      registry = "unknown";
      src = fetchCrateLocal workspaceSrc;
      dependencies = {
        clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.8" {inherit profileName;}).out;
        fxhash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" {inherit profileName;}).out;
        itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" {inherit profileName;}).out;
        kdam = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".kdam."0.5.2" {inherit profileName;}).out;
        rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {inherit profileName;}).out;
        rustsat = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustsat."0.4.3" {inherit profileName;}).out;
        rustsat_kissat = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustsat-kissat."0.1.6" {inherit profileName;}).out;
        volute = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".volute."1.1.5" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" = overridableMkRustCrate (profileName: rec {
      name = "quote";
      version = "1.0.36";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7";
      };
      features = builtins.concatLists [
        ["default"]
        ["proc-macro"]
      ];
      dependencies = {
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
      name = "rand";
      version = "0.8.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["default"]
        ["getrandom"]
        ["libc"]
        ["rand_chacha"]
        ["small_rng"]
        ["std"]
        ["std_rng"]
      ];
      dependencies = {
        ${
          if hostPlatform.isUnix
          then "libc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        rand_chacha = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" {inherit profileName;}).out;
        rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
      name = "rand_chacha";
      version = "0.3.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88";
      };
      features = builtins.concatLists [
        ["std"]
      ];
      dependencies = {
        ppv_lite86 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" {inherit profileName;}).out;
        rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" = overridableMkRustCrate (profileName: rec {
      name = "rand_core";
      version = "0.6.4";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["getrandom"]
        ["std"]
      ];
      dependencies = {
        getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
      name = "rustc-hash";
      version = "1.1.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2";
      };
      features = builtins.concatLists [
        ["default"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.34" = overridableMkRustCrate (profileName: rec {
      name = "rustix";
      version = "0.38.34";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["default"]
        ["fs"]
        ["libc-extra-traits"]
        ["std"]
        ["termios"]
        ["use-libc-auxv"]
      ];
      dependencies = {
        bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64)) || hostPlatform.isWindows
          then "libc_errno"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.9" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64))
          then "libc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux") && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64))
          then "linux_raw_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.14" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "windows_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".rustsat."0.4.3" = overridableMkRustCrate (profileName: rec {
      name = "rustsat";
      version = "0.4.3";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "f7face2f32c7d9fd1bca46af42960eb4789d95c8dcb799833a1c75736db3d19c";
      };
      features = builtins.concatLists [
        ["default"]
        ["fxhash"]
        ["optimization"]
      ];
      dependencies = {
        cpu_time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpu-time."1.0.0" {inherit profileName;}).out;
        nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" {inherit profileName;}).out;
        rustc_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" {inherit profileName;}).out;
        thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.61" {inherit profileName;}).out;
        visibility = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".visibility."0.1.0" {profileName = "__noProfile";}).out;
      };
      buildDependencies = {
        cbindgen = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cbindgen."0.26.0" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".rustsat-kissat."0.1.6" = overridableMkRustCrate (profileName: rec {
      name = "rustsat-kissat";
      version = "0.1.6";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "53a5868b8fae920378f8d6637ecfc30514c600f5e48361578b1eebe2bd18d370";
      };
      dependencies = {
        cpu_time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpu-time."1.0.0" {inherit profileName;}).out;
        rustsat = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustsat."0.4.3" {inherit profileName;}).out;
      };
      buildDependencies = {
        cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.101" {profileName = "__noProfile";}).out;
        chrono = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" {profileName = "__noProfile";}).out;
        git2 = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".git2."0.18.3" {profileName = "__noProfile";}).out;
        glob = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" = overridableMkRustCrate (profileName: rec {
      name = "ryu";
      version = "1.0.18";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.203" = overridableMkRustCrate (profileName: rec {
      name = "serde";
      version = "1.0.203";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "7253ab4de971e72fb7be983802300c30b5a7f0c2e56fab8abfc6a214307c0094";
      };
      features = builtins.concatLists [
        ["default"]
        ["derive"]
        ["serde_derive"]
        ["std"]
      ];
      dependencies = {
        serde_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.203" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.203" = overridableMkRustCrate (profileName: rec {
      name = "serde_derive";
      version = "1.0.203";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "500cbc0ebeb6f46627f50f3f5811ccf6bf00643be300b4c3eabc0ef55dc5b5ba";
      };
      features = builtins.concatLists [
        ["default"]
      ];
      dependencies = {
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.68" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.118" = overridableMkRustCrate (profileName: rec {
      name = "serde_json";
      version = "1.0.118";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "d947f6b3163d8857ea16c4fa0dd4840d52f3041039a85decd46867eb1abef2e4";
      };
      features = builtins.concatLists [
        ["default"]
        ["std"]
      ];
      dependencies = {
        itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" {inherit profileName;}).out;
        ryu = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" {inherit profileName;}).out;
        serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.203" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" = overridableMkRustCrate (profileName: rec {
      name = "strsim";
      version = "0.10.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.1" = overridableMkRustCrate (profileName: rec {
      name = "strsim";
      version = "0.11.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" = overridableMkRustCrate (profileName: rec {
      name = "syn";
      version = "1.0.109";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237";
      };
      features = builtins.concatLists [
        ["clone-impls"]
        ["extra-traits"]
        ["fold"]
        ["full"]
        ["parsing"]
        ["printing"]
        ["quote"]
      ];
      dependencies = {
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".syn."2.0.68" = overridableMkRustCrate (profileName: rec {
      name = "syn";
      version = "2.0.68";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "901fa70d88b9d6c98022e23b4136f9f3e54e4662c3bc1bd1d84a42a9a0f0c1e9";
      };
      features = builtins.concatLists [
        ["clone-impls"]
        ["default"]
        ["derive"]
        ["full"]
        ["parsing"]
        ["printing"]
        ["proc-macro"]
        ["visit"]
      ];
      dependencies = {
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.10.1" = overridableMkRustCrate (profileName: rec {
      name = "tempfile";
      version = "3.10.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1";
      };
      dependencies = {
        cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;}).out;
        fastrand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.1.0" {inherit profileName;}).out;
        ${
          if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi"
          then "rustix"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.34" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "windows_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".termcolor."1.4.1" = overridableMkRustCrate (profileName: rec {
      name = "termcolor";
      version = "1.4.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755";
      };
      dependencies = {
        ${
          if hostPlatform.isWindows
          then "winapi_util"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.8" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".terminal_size."0.3.0" = overridableMkRustCrate (profileName: rec {
      name = "terminal_size";
      version = "0.3.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "21bebf2b7c9e0a515f6e0f8c51dc0f8e4696391e6f1ff30379559f8365fb0df7";
      };
      dependencies = {
        ${
          if !hostPlatform.isWindows
          then "rustix"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.34" {inherit profileName;}).out;
        ${
          if hostPlatform.isWindows
          then "windows_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".textwrap."0.16.1" = overridableMkRustCrate (profileName: rec {
      name = "textwrap";
      version = "0.16.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "23d434d3f8967a09480fb04132ebe0a3e088c173e6d0ee7897abbdf4eab0f8b9";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.61" = overridableMkRustCrate (profileName: rec {
      name = "thiserror";
      version = "1.0.61";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "c546c80d6be4bc6a00c0f01730c08df82eaa7a7a61f11d656526506112cc1709";
      };
      dependencies = {
        thiserror_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.61" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.61" = overridableMkRustCrate (profileName: rec {
      name = "thiserror-impl";
      version = "1.0.61";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "46c3384250002a6d5af4d114f2845d37b57521033f30d5c3f46c4d70e1197533";
      };
      dependencies = {
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.68" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.1" = overridableMkRustCrate (profileName: rec {
      name = "tinyvec";
      version = "1.6.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "c55115c6fbe2d2bef26eb09ad74bde02d8255476fc0c7b515ef09fbb35742d82";
      };
      features = builtins.concatLists [
        ["alloc"]
        ["default"]
        ["tinyvec_macros"]
      ];
      dependencies = {
        tinyvec_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" = overridableMkRustCrate (profileName: rec {
      name = "tinyvec_macros";
      version = "0.1.1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".toml."0.5.11" = overridableMkRustCrate (profileName: rec {
      name = "toml";
      version = "0.5.11";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234";
      };
      features = builtins.concatLists [
        ["default"]
      ];
      dependencies = {
        serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.203" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.15" = overridableMkRustCrate (profileName: rec {
      name = "unicode-bidi";
      version = "0.3.15";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75";
      };
      features = builtins.concatLists [
        ["hardcoded-data"]
        ["std"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" = overridableMkRustCrate (profileName: rec {
      name = "unicode-ident";
      version = "1.0.12";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.23" = overridableMkRustCrate (profileName: rec {
      name = "unicode-normalization";
      version = "0.1.23";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5";
      };
      features = builtins.concatLists [
        ["std"]
      ];
      dependencies = {
        tinyvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.1" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" = overridableMkRustCrate (profileName: rec {
      name = "url";
      version = "2.5.2";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "22784dbdf76fdde8af1aeda5622b546b422b6fc585325248a2bf9f5e41e94d6c";
      };
      features = builtins.concatLists [
        ["default"]
      ];
      dependencies = {
        form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" {inherit profileName;}).out;
        idna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.5.0" {inherit profileName;}).out;
        percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.2" = overridableMkRustCrate (profileName: rec {
      name = "utf8parse";
      version = "0.2.2";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821";
      };
      features = builtins.concatLists [
        ["default"]
      ];
    });

    "registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" = overridableMkRustCrate (profileName: rec {
      name = "vcpkg";
      version = "0.2.15";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".visibility."0.1.0" = overridableMkRustCrate (profileName: rec {
      name = "visibility";
      version = "0.1.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "b3fd98999db9227cf28e59d83e1f120f42bc233d4b152e8fab9bc87d5bb1e0f8";
      };
      dependencies = {
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.68" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".volute."1.1.5" = overridableMkRustCrate (profileName: rec {
      name = "volute";
      version = "1.1.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "09ddd5b04c8fd01c4571a52700cc0b4e762bdcdd36ee4379295e680ae959e4cf";
      };
      features = builtins.concatLists [
        ["default"]
        ["rand"]
      ];
      dependencies = {
        rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
      name = "wasi";
      version = "0.11.0+wasi-snapshot-preview1";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" = overridableMkRustCrate (profileName: rec {
      name = "wasm-bindgen";
      version = "0.2.92";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8";
      };
      features = builtins.concatLists [
        ["default"]
        ["spans"]
        ["std"]
      ];
      dependencies = {
        cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;}).out;
        wasm_bindgen_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.92" {profileName = "__noProfile";}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.92" = overridableMkRustCrate (profileName: rec {
      name = "wasm-bindgen-backend";
      version = "0.2.92";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da";
      };
      features = builtins.concatLists [
        ["spans"]
      ];
      dependencies = {
        bumpalo = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.16.0" {inherit profileName;}).out;
        log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" {inherit profileName;}).out;
        once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" {inherit profileName;}).out;
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.68" {inherit profileName;}).out;
        wasm_bindgen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.92" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.92" = overridableMkRustCrate (profileName: rec {
      name = "wasm-bindgen-macro";
      version = "0.2.92";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726";
      };
      features = builtins.concatLists [
        ["spans"]
      ];
      dependencies = {
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        wasm_bindgen_macro_support = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.92" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.92" = overridableMkRustCrate (profileName: rec {
      name = "wasm-bindgen-macro-support";
      version = "0.2.92";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7";
      };
      features = builtins.concatLists [
        ["spans"]
      ];
      dependencies = {
        proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" {inherit profileName;}).out;
        quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" {inherit profileName;}).out;
        syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.68" {inherit profileName;}).out;
        wasm_bindgen_backend = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.92" {inherit profileName;}).out;
        wasm_bindgen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.92" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.92" = overridableMkRustCrate (profileName: rec {
      name = "wasm-bindgen-shared";
      version = "0.2.92";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
      name = "winapi";
      version = "0.3.9";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419";
      };
      features = builtins.concatLists [
        ["consoleapi"]
        ["minwinbase"]
        ["minwindef"]
        ["processenv"]
        ["processthreadsapi"]
        ["winbase"]
      ];
      dependencies = {
        ${
          if hostPlatform.config == "i686-pc-windows-gnu"
          then "winapi_i686_pc_windows_gnu"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" {inherit profileName;}).out;
        ${
          if hostPlatform.config == "x86_64-pc-windows-gnu"
          then "winapi_x86_64_pc_windows_gnu"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
      name = "winapi-i686-pc-windows-gnu";
      version = "0.4.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.8" = overridableMkRustCrate (profileName: rec {
      name = "winapi-util";
      version = "0.1.8";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b";
      };
      dependencies = {
        ${
          if hostPlatform.isWindows
          then "windows_sys"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
      name = "winapi-x86_64-pc-windows-gnu";
      version = "0.4.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows-core."0.52.0" = overridableMkRustCrate (profileName: rec {
      name = "windows-core";
      version = "0.52.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9";
      };
      features = builtins.concatLists [
        ["default"]
      ];
      dependencies = {
        windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.5" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" = overridableMkRustCrate (profileName: rec {
      name = "windows-sys";
      version = "0.48.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9";
      };
      features = builtins.concatLists [
        ["Win32"]
        ["Win32_Foundation"]
        ["Win32_System"]
        ["Win32_System_Console"]
        ["default"]
      ];
      dependencies = {
        windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" = overridableMkRustCrate (profileName: rec {
      name = "windows-sys";
      version = "0.52.0";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d";
      };
      features = builtins.concatLists [
        ["Win32"]
        ["Win32_Foundation"]
        ["Win32_NetworkManagement"]
        ["Win32_NetworkManagement_IpHelper"]
        ["Win32_Networking"]
        ["Win32_Networking_WinSock"]
        ["Win32_Storage"]
        ["Win32_Storage_FileSystem"]
        ["Win32_System"]
        ["Win32_System_Console"]
        ["Win32_System_Diagnostics"]
        ["Win32_System_Diagnostics_Debug"]
        ["Win32_System_SystemInformation"]
        ["Win32_System_Threading"]
        ["default"]
      ];
      dependencies = {
        windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.5" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" = overridableMkRustCrate (profileName: rec {
      name = "windows-targets";
      version = "0.48.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c";
      };
      dependencies = {
        ${
          if hostPlatform.config == "aarch64-pc-windows-gnullvm"
          then "windows_aarch64_gnullvm"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc"
          then "windows_aarch64_msvc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu"
          then "windows_i686_gnu"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc"
          then "windows_i686_msvc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu"
          then "windows_x86_64_gnu"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" {inherit profileName;}).out;
        ${
          if hostPlatform.config == "x86_64-pc-windows-gnullvm"
          then "windows_x86_64_gnullvm"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "msvc"
          then "windows_x86_64_msvc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.5" = overridableMkRustCrate (profileName: rec {
      name = "windows-targets";
      version = "0.52.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb";
      };
      dependencies = {
        ${
          if hostPlatform.config == "aarch64-pc-windows-gnullvm"
          then "windows_aarch64_gnullvm"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc"
          then "windows_aarch64_msvc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu"
          then "windows_i686_gnu"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.5" {inherit profileName;}).out;
        ${
          if hostPlatform.config == "i686-pc-windows-gnullvm"
          then "windows_i686_gnullvm"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.52.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc"
          then "windows_i686_msvc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.5" {inherit profileName;}).out;
        ${
          if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu"
          then "windows_x86_64_gnu"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.5" {inherit profileName;}).out;
        ${
          if hostPlatform.config == "x86_64-pc-windows-gnullvm"
          then "windows_x86_64_gnullvm"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.5" {inherit profileName;}).out;
        ${
          if (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "arm64ec") && hostPlatform.parsed.abi.name == "msvc"
          then "windows_x86_64_msvc"
          else null
        } =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.5" {inherit profileName;}).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_aarch64_gnullvm";
      version = "0.48.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_aarch64_gnullvm";
      version = "0.52.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_aarch64_msvc";
      version = "0.48.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_aarch64_msvc";
      version = "0.52.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_i686_gnu";
      version = "0.48.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_i686_gnu";
      version = "0.52.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.52.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_i686_gnullvm";
      version = "0.52.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_i686_msvc";
      version = "0.48.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_i686_msvc";
      version = "0.52.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_x86_64_gnu";
      version = "0.48.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_x86_64_gnu";
      version = "0.52.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_x86_64_gnullvm";
      version = "0.48.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_x86_64_gnullvm";
      version = "0.52.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_x86_64_msvc";
      version = "0.48.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538";
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.5" = overridableMkRustCrate (profileName: rec {
      name = "windows_x86_64_msvc";
      version = "0.52.5";
      registry = "registry+https://github.com/rust-lang/crates.io-index";
      src = fetchCratesIo {
        inherit name version;
        sha256 = "bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0";
      };
    });
  }
